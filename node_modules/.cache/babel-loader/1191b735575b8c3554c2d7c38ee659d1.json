{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://http-request-quote-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    console.log(quoteObj);\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["C:/Users/user/Documents/React/multi-page-react/multi-page-react/src/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","console","log","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = 'https://http-request-quote-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    console.log(quoteObj);\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}